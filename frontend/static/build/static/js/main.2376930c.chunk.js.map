{"version":3,"sources":["serviceWorker.js","components/BaseLayout.js","components/Login.js","components/Register.js","index.js"],"names":["Boolean","window","location","hostname","match","BaseLayout","props","className","to","children","axios","defaults","xsrfCookieName","xsrfHeaderName","Login","handleInput","e","setState","target","name","value","handleSubmit","preventDefault","method","url","data","state","then","res","console","log","localStorage","setItem","key","hisory","push","catch","error","username","password","onSubmit","this","type","placeholder","onChange","React","Component","Register","password1","password2","email","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2376930c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nfunction BaseLayout(props) {\n\n\n\n    // function based components use props instead of this.props\n    // class based components you call this.props\n\n    return (\n        <div>\n            <div className=\"nav\">\n                <ul className=\"nav-bar\">\n                    <NavLink className=\"nav-link\" to=\"/home\">Home Page</NavLink>\n                    {/*<NavLink className=\"nav-link\" to=\"/accounts/register\">Register</NavLink>*/}\n                    <NavLink className=\"nav-link\" to=\"/accounts/login\">Login</NavLink>\n                    <NavLink className=\"nav-link\" to=\"/schedule\">Schedule</NavLink>\n                    <NavLink className=\"nav-link\" to=\"/jobs/new\">AddJob</NavLink>\n                    <NavLink className=\"nav-link\" to=\"/jobs/edit\">JobEdit</NavLink>\n\n                </ul>\n            </div>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default BaseLayout;\n","import React from 'react';\n\nimport axios from 'axios';\nimport {NavLink} from \"react-router-dom\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: '',\n      password: '',\n    }\n  }\n  handleInput = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n}\n\nhandleSubmit = (e) => {\n    e.preventDefault();\n\n    axios({\n      method: 'POST',\n      url: '/rest-auth/login/',\n      data: this.state\n    })\n    .then(res => {\n      console.log(res);\n      //save the token I get back once I succeefully login to localStorage\n      localStorage.setItem('token', res.data.key)\n\n      this.props.hisory.push('/schedule');\n    })\n    .catch(error => {\n      console.log(error);\n    })\n}\nrender() {\n        return (\n            <div className=\" hero\">\n                <div className=\"login-form\">\n                <form  onSubmit={this.handleSubmit}>\n                    <div className=\"container\">\n                    <input className=\"login-input\" type=\"text\" name=\"username\" placeholder=\"Enter username\" value={this.state.username}\n                           onChange={this.handleInput}/>\n                           <br/>\n                    <input type=\"password\" name=\"password\" placeholder=\"Enter password\" value={this.state.password}\n                           onChange={this.handleInput}/>\n                           <br/>\n                    <input type=\"submit\" value=\"Login\"/>\n                    <br/>\n                    <button className=\"btn-light\" value='register'><NavLink className=\"register\" to=\"/accounts/register\">Register</NavLink></button>\n                    </div>\n                </form>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login;\n","import React from 'react';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            password1: '',\n            password2: '',\n            email: '',\n        }\n    }\n\n    handleInput = (e) => {\n        // e is the event\n        // e.target is the input\n        // e.target.name is pulling the value of the name attribute off of the input I typed in\n\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    handleSubmit = (e) => {\n        // default behavior of a form submit is to reload the page\n        // e.preventDefault() prevents the page from reloading / stops the default behavior\n        e.preventDefault();\n\n        axios({\n            method: 'POST',\n            url: '/rest-auth/registration/',\n            data: this.state\n        })\n            .then(res => {\n                console.log(res);\n                // save the token we get back once we successfully login to localStorage\n                localStorage.setItem('token', res.data.key);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"username\" placeholder=\"username\" value={this.state.username}\n                       onChange={this.handleInput}/>\n                <br/>\n               <input type=\"email\" name=\"email\" placeholder=\"email\" value={this.state.email}\n                       onChange={this.handleInput}/>\n                <br/>\n                <input type=\"password\" name=\"password1\" placeholder=\"password\" value={this.state.password1}\n                       onChange={this.handleInput}/>\n                <br/>\n               <input type=\"password\" name=\"password2\" placeholder=\"confirm password\" value={this.state.password2}\n                       onChange={this.handleInput}/>\n                <br/>\n                <button type=\"submit\" value=\"Register\">Register</button>\n                {/*<input type=\"submit\" value=\"Register\"/>*/}\n            </form>\n        )\n    }\n}\n\nexport default Register;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport BaseLayout from './components/BaseLayout';\nimport Login from './components/Login';\nimport Register from './components/Register';\n\n\n\n\nReactDOM.render(<BrowserRouter>\n  <BaseLayout>\n      <Switch>\n          <Route path=\"/accounts/login\" component={Login}/>\n          <Route path=\"/accounts/register\" component={Register}/>\n      </Switch>\n  </BaseLayout>\n</BrowserRouter>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}